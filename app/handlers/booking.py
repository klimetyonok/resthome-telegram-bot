from aiogram import Router, types, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from app.database.base import async_session, create_booking, get_or_create_user
from datetime import datetime

router = Router()

class BookingState(StatesGroup):
    choosing_dates = State()
    entering_name = State()
    entering_phone = State()
    finished = State()

@router.message(F.text == "üè® –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä")
async def start_booking(message: types.Message, state: FSMContext):
    await state.set_state(BookingState.choosing_dates)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞ –∏ –≤—ã–µ–∑–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):")

@router.message(BookingState.choosing_dates)
async def process_dates(message: types.Message, state: FSMContext):
    try:
        date_in_str, date_out_str  = message.text.split()
        date_in = datetime.strptime(date_in_str, "%d.%m.%Y").date()
        date_out = datetime.strptime(date_out_str , "%d.%m.%Y").date()
        await state.update_data(date_in=date_in, date_out=date_out)
        await state.set_state(BookingState.entering_name)
        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    except:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 25.12.2024 30.12.2024")

@router.message(BookingState.entering_name)
async def process_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    await state.update_data(name=name)
    await state.set_state(BookingState.entering_phone)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

@router.message(BookingState.entering_phone)
async def process_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    await state.update_data(phone=phone)
    await state.set_state(BookingState.finished)
    #await message.answer("–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
    
    data = await state.get_data()

    async with async_session() as session:
            user = await get_or_create_user(
                session=session,
                tg_id=message.from_user.id,
                fullname=message.from_user.full_name,
                username=message.from_user.username
            )

            booking = await create_booking(
                session=session,
                user=user,
                check_in=data['date_in'],
                check_out=data['date_out'],
                guest_name=data['name'],
                guest_phone=data['phone']
            )
            
            check_in_str = data['date_in'].strftime("%d.%m.%Y")
            check_out_str = data['date_out'].strftime("%d.%m.%Y")
            
            await message.answer(
                f"‚úÖ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
                f"üìÖ <b>–î–∞—Ç—ã:</b> {check_in_str} - {check_out_str}\n"
                f"üë§ <b>–ì–æ—Å—Ç—å:</b> {data['name']}\n"
                f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data['phone']}\n"
                f"üî¢ <b>–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:</b> #{booking.id}\n\n"
                f"–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
                parse_mode="HTML"
            )
            await state.clear()